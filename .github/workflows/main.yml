name: Validate and Sync Content

on:
  push:
    paths:
      - "project_*/*.html"
      - "project_*/project.json"
      - "templates/*.html"
      - ".github/workflows/main.yml" # This file itself
      - ".github/scripts/validate-content.js"
      - ".github/scripts/sync_templates.py"
      - ".github/scripts/sync_content.py"

jobs:
  validate:
    name: Validate HTML Content
    runs-on: arc-runners-small
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install dependencies (Node)
        # Assuming package.json is at the root and contains necessary deps for validation script
        run: npm install

      - name: Validate HTML content
        run: node .github/scripts/validate-content.js

  sync-templates:
    name: Sync Templates to Supabase
    if: github.ref == 'refs/heads/main'
    runs-on: arc-runners-small
    needs: validate # Depends on the 'validate' job succeeding
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (Python)
        run: |
          python -m pip install --upgrade pip
          pip install supabase

      - name: Sync templates to Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: python .github/scripts/sync_templates.py

  sync-content:
    name: Sync Stage Content to Supabase
    runs-on: arc-runners-small
    needs: validate # Depends on the 'validate' job succeeding
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies (Python)
        run: |
          python -m pip install --upgrade pip
          pip install supabase

      - name: Sync stage content to Supabase
        id: sync-content
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          python .github/scripts/sync_content.py | tee sync_output.log

          # Extract draft project information from the output
          if grep -q "DRAFT_PROJECT:" sync_output.log; then
            echo "draft_projects_found=true" >> $GITHUB_OUTPUT
            grep "DRAFT_PROJECT:" sync_output.log > draft_projects.txt
          else
            echo "draft_projects_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Post comment with draft project links
        if: ${{ github.event_name == 'pull_request' && steps.sync-content.outputs.draft_projects_found == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const draftProjectsData = fs.readFileSync('draft_projects.txt', 'utf8');
            const draftProjects = draftProjectsData.split('\n')
              .filter(line => line.startsWith('DRAFT_PROJECT:'))
              .map(line => {
                const [_, draftId, originalId, ...titleParts] = line.split(':');
                return {
                  draftId: draftId,
                  originalId: originalId,
                  title: titleParts.join(':')
                };
              });

            if (draftProjects.length > 0) {
              const commentTitle = '## ðŸš€ Draft Projects Created';
              let commentBody = `${commentTitle}\n\n`;
              commentBody += 'The following draft projects have been created in this PR:\n\n';

              draftProjects.forEach(project => {
                commentBody += `- [${project.title}](https://enlightby.ai/projects/${project.draftId}) (Draft ID: ${project.draftId}, Original ID: ${project.originalId})\n`;
              });

              commentBody += '\nThese links will work after the database has been updated.';

              // Check if a similar comment already exists
              const { data: existingComments } = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              // Look for a comment that starts with the same title
              const duplicateComment = existingComments.find(comment => 
                comment.body.startsWith(commentTitle)
              );

              if (duplicateComment) {
                console.log('A comment with draft project links already exists. Updating it instead of creating a new one.');
                await github.rest.issues.updateComment({
                  comment_id: duplicateComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              } else {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              }
            }

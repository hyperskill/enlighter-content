{
  "id": 19,
  "description": "A web-based chatbot application that helps users watercolor paint various items using AI image processing and natural language capabilities.",
  "title": "Agent \"All Dry\"",
  "categories": "AI, Langchain, Image Generation",
  "cover_url": "https://pdqqywctjlfcaeeaykvj.supabase.co/storage/v1/object/public/aidl-bucket//output_4-2.png",
  "readme": "# Item Watercolor Painting Assistant\n\nA web-based chatbot application that helps users watercolor paint various items using AI image processing and natural language capabilities.\n\n[Link to project](https://enlightby.ai/#/projects/19)  \n[Install Enlighter extention](https://marketplace.visualstudio.com/items?itemName=ai-dl.enlighter)  \n[Join Discord Server](https://discord.gg/VfAzUvUxRM)\n\n## Features\n\n- Chat interface for discussing watercolor painting methods\n- Image upload capability for processing items\n- AI-powered image transformation to make items appear as watercolor paintings\n- Specialized assistant focused on watercolor painting advice\n\n## Architecture\n\nThis application uses:\n- **Gradio**: For the web interface\n- **LangChain**: For the agent implementation\n- **Stable Diffusion**: For image processing\n- **OpenRouter API**: For accessing Gemini model\n\n## Components\n\n1. **Image Watercolor Painter**: Uses Stable Diffusion to transform images\n2. **Chat Model**: Connects to OpenRouter API to access Gemini model\n3. **Watercolor Painting Agent**: Integrates chat and image processing\n4. **Main Application**: Provides the Gradio web interface\n\n## Setup\n\n1. Clone this repository\n2. Create a virtual environment:\n   ```\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n3. Install dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n4. Set your OpenRouter API key (optional, default key is provided):\n   ```\n   export OPENROUTER_API_KEY=your_api_key_here\n   ```\n\n## Running the Application\n\nRun the application with:\n```\npython app.py\n```\n\nThe application will start a local web server and provide a URL to access the interface.\n\n## Testing\n\nRun the tests with:\n```\npython test_app.py\n```\n\nThis will test all components of the application and save test results in the `test_results` directory.\n\n## Usage\n\n1. Type a message about an item you want to watercolor paint\n2. Optionally upload an image of an item\n3. The assistant will provide advice and process the image to show how it would look as a watercolor painting\n4. Continue the conversation to get more specific advice\n\n## Example Prompts\n\n- \"How do I watercolor paint a book?\"\n- \"Can you help me watercolor paint this painting?\" (with image upload)\n- \"What's the best way to watercolor paint a phone?\"\n- \"I want to watercolor paint my laptop, how can I do it?\"\n                            \n                                \n                            \n                        ",
  "short_description": "Use RAG to watercolor paint your images â€” experiment with AI agents for image handling",
  "ides": "cursor"
}
TITLE: Publishing Python Package with uv (Console)
DESCRIPTION: This command uploads the built Python package to a configured package registry, such as PyPI. Authentication credentials can be provided via `--token`, `UV_PUBLISH_TOKEN`, or a username/password combination. For GitHub Actions, trusted publishers can be configured on PyPI to avoid explicit credential setup.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_2

LANGUAGE: console
CODE:
```
$ uv publish
```

----------------------------------------

TITLE: Managing Python Projects with uv
DESCRIPTION: This sequence of commands demonstrates the core project management workflow using `uv`. It covers initializing a new project, adding a dependency (`ruff`), running a command within the project's virtual environment, generating a lockfile, and synchronizing dependencies.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
$ uv init example
Initialized project `example` at `/home/user/example`

$ cd example

$ uv add ruff
Creating virtual environment at: .venv
Resolved 2 packages in 170ms
   Built example @ file:///home/user/example
Prepared 2 packages in 627ms
Installed 2 packages in 1ms
 + example==0.1.0 (from file:///home/user/example)
 + ruff==0.5.0

$ uv run ruff check
All checks passed!

$ uv lock
Resolved 2 packages in 0.33ms

$ uv sync
Resolved 2 packages in 0.70ms
Audited 1 package in 0.02ms
```

----------------------------------------

TITLE: Multi-stage Docker Build for uv Installation
DESCRIPTION: This Dockerfile demonstrates a multi-stage build process to install uv and manage Python dependencies. It uses an intermediate builder stage to install project dependencies and then copies only the virtual environment to the final slim image, optimizing image size and build time. It includes caching for uv and binding project files for dependency resolution.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/docker.md#_snippet_22

LANGUAGE: Dockerfile
CODE:
```
FROM python:3.12-slim AS builder
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Change the working directory to the `app` directory
WORKDIR /app

# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --locked --no-install-project --no-editable

# Copy the project into the intermediate image
ADD . /app

# Sync the project
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --locked --no-editable

FROM python:3.12-slim

# Copy the environment, but not the source code
COPY --from=builder --chown=app:app /app/.venv /app/.venv

# Run the application
CMD ["/app/.venv/bin/hello"]
```

----------------------------------------

TITLE: Creating Virtual Environment with Specific Python Version (uv)
DESCRIPTION: Demonstrates how to create a virtual environment using `uv` and explicitly specify a Python version (e.g., 3.11.6) for the environment. uv will automatically download and install the requested version if it's not already available on the system.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/python-versions.md#_snippet_0

LANGUAGE: Shell
CODE:
```
uv venv --python 3.11.6
```

----------------------------------------

TITLE: Activating Virtual Environment (macOS/Linux Console)
DESCRIPTION: Activates the virtual environment located at `.venv` in POSIX-compliant shells (like bash, zsh) on macOS and Linux. This makes the environment's Python and installed packages available in the current shell session.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/environments.md#_snippet_4

LANGUAGE: console
CODE:
```
$ source .venv/bin/activate
```

----------------------------------------

TITLE: Installing uv via pip
DESCRIPTION: This command installs the `uv` package using `pip`, the standard Python package installer. This method requires a Python environment with `pip` already set up.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pip install uv
```

----------------------------------------

TITLE: Adding a basic dependency with uv
DESCRIPTION: This command adds 'httpx' as a dependency to the project. An entry will be automatically added to the `project.dependencies` field in `pyproject.toml` with a compatible version constraint.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/dependencies.md#_snippet_0

LANGUAGE: console
CODE:
```
$ uv add httpx
```

----------------------------------------

TITLE: Verifying uv Installation (Console)
DESCRIPTION: This snippet demonstrates how to verify that uv has been successfully installed and is accessible from the command line. Running the 'uv' command without arguments should display its help menu, confirming its presence and basic functionality.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/getting-started/first-steps.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ uv
An extremely fast Python package manager.

Usage: uv [OPTIONS] <COMMAND>

...
```

----------------------------------------

TITLE: Defining Project Dependencies in pyproject.toml
DESCRIPTION: This `pyproject.toml` file defines the project metadata, required Python version, and core dependencies (`fastapi`, `mangum`) for the application. It also includes a `dev` dependency group for development-specific packages like `fastapi[standard]`.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/aws-lambda.md#_snippet_1

LANGUAGE: toml
CODE:
```
[project]
name = "uv-aws-lambda-example"
version = "0.1.0"
requires-python = ">=3.13"
dependencies = [
    # FastAPI is a modern web framework for building APIs with Python.
    "fastapi",
    # Mangum is a library that adapts ASGI applications to AWS Lambda and API Gateway.
    "mangum",
]

[dependency-groups]
dev = [
    # In development mode, include the FastAPI development server.
    "fastapi[standard]>=0.115",
]
```

----------------------------------------


TITLE: Installing uv via pipx
DESCRIPTION: This command installs `uv` into an isolated environment using `pipx`, a tool for installing and running Python applications in isolated virtual environments. This ensures `uv` and its dependencies do not conflict with other Python projects.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pipx install uv
```

----------------------------------------

TITLE: Installing Locked Requirements with uv pip
DESCRIPTION: This command uses `uv pip sync` to install all packages listed in a locked requirements file (`docs/requirements.txt`) into the current virtual environment. It efficiently resolves and installs the specified dependencies, ensuring reproducible installations.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_15

LANGUAGE: console
CODE:
```
$ uv pip sync docs/requirements.txt
Resolved 43 packages in 11ms
Installed 43 packages in 208ms
 + babel==2.15.0
 + black==24.4.2
 + certifi==2024.7.4
 ...
```

----------------------------------------

TITLE: Installing a Python Project and Dependencies with uv
DESCRIPTION: This Dockerfile snippet demonstrates a two-step process for installing a Python project and its dependencies. First, it copies pyproject.toml to install core dependencies, leveraging Docker's build cache. Then, it copies the entire project and installs it in editable mode, allowing for efficient caching of dependencies separate from frequently changing source code.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/docker.md#_snippet_29

LANGUAGE: Dockerfile
CODE:
```
COPY pyproject.toml .
RUN uv pip install -r pyproject.toml
COPY . .
RUN uv pip install -e .
```

----------------------------------------

TITLE: Installing uv on Windows
DESCRIPTION: This PowerShell command downloads and executes the `uv` installation script on Windows. It uses `irm` (Invoke-RestMethod) to fetch the script and `iex` (Invoke-Expression) to run it, bypassing execution policy for the current session.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_1

LANGUAGE: powershell
CODE:
```
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```

----------------------------------------

TITLE: Installing uv on macOS and Linux
DESCRIPTION: This command uses `curl` to download and execute the `uv` installation script on macOS and Linux systems. It's a standalone installer that does not require Rust or Python to be pre-installed.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -LsSf https://astral.sh/uv/install.sh | sh
```

----------------------------------------

TITLE: Building Python Package with uv (Console)
DESCRIPTION: This command initiates the build process for a Python package using `uv`. By default, `uv build` processes the project in the current directory and places the generated distribution artifacts into a `dist/` subdirectory. It's a fundamental step before publishing a package.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/package.md#_snippet_1

LANGUAGE: console
CODE:
```
$ uv build
```

----------------------------------------

TITLE: Creating a Virtual Environment with uv
DESCRIPTION: This command creates a new virtual environment in the current directory using `uv venv`. It automatically detects the appropriate Python version and provides instructions for activating the environment.
SOURCE: https://github.com/astral-sh/uv/blob/main/README.md#_snippet_14

LANGUAGE: console
CODE:
```
$ uv venv
Using Python 3.12.3
Creating virtual environment at: .venv
Activate with: source .venv/bin/activate
```

----------------------------------------

TITLE: Defining Project Dependencies in pyproject.toml (TOML)
DESCRIPTION: This TOML snippet demonstrates how to define project dependencies within the `[project.dependencies]` table in `pyproject.toml`. It shows various dependency specifiers, including version ranges, exact versions, extras (e.g., `transformers[torch]`), and environment markers for conditional installation based on Python version.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/concepts/projects/dependencies.md#_snippet_14

LANGUAGE: toml
CODE:
```
[project]
name = "albatross"
version = "0.1.0"
dependencies = [
  # Any version in this range
  "tqdm >=4.66.2,<5",
  # Exactly this version of torch
  "torch ==2.2.2",
  # Install transformers with the torch extra
  "transformers[torch] >=4.39.3,<5",
  # Only install this package on older python versions
  # See "Environment Markers" for more information
  "importlib_metadata >=7.1.0,<8; python_version < '3.10'",
  "mollymawk ==0.1.0"
]
```

----------------------------------------

TITLE: Installing an external project as an editable package with uv pip
DESCRIPTION: Installs a project located in a different directory as an editable package. This allows developers to work on a package's source code in one location and have changes instantly available in another project's virtual environment.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/packages.md#_snippet_9

LANGUAGE: console
CODE:
```
$ uv pip install -e "ruff @ ./project/ruff"
```

----------------------------------------

TITLE: Installing packages from a pyproject.toml file with uv pip
DESCRIPTION: Installs packages defined within a `pyproject.toml` file. This command leverages the modern Python packaging standard to manage project dependencies, including build system requirements and project metadata.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/packages.md#_snippet_11

LANGUAGE: console
CODE:
```
$ uv pip install -r pyproject.toml
```

----------------------------------------

TITLE: Executing Script with Declared Dependency (rich)
DESCRIPTION: This console command executes `example.py` using `uv run --with rich`. The `--with rich` option instructs `uv` to install the `rich` package before running the script, resolving the previous `ModuleNotFoundError`.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/scripts.md#_snippet_12

LANGUAGE: console
CODE:
```
$ uv run --with rich example.py
For example: ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 0:00:01
```

----------------------------------------

TITLE: Freezing Environment to requirements.txt (uv pip freeze)
DESCRIPTION: This command outputs all installed packages and their exact versions in a format compatible with `requirements.txt`. This is essential for reproducing the environment precisely.
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/pip/inspection.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ uv pip freeze
```

----------------------------------------

TITLE: Running FastAPI Application Locally with uv
DESCRIPTION: This command demonstrates how to execute the FastAPI development server locally using `uv`. The `uv run` command acts as a wrapper, allowing `uv` to manage the environment and dependencies before running the specified command (`fastapi dev`).
SOURCE: https://github.com/astral-sh/uv/blob/main/docs/guides/integration/aws-lambda.md#_snippet_3

LANGUAGE: console
CODE:
```
$ uv run fastapi dev
```

----------------------------------------
